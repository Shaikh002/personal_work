name: Upload IG Reel to YouTube

on:
  schedule:
    # 11:30 AM IST ‚Üí 18:00 UTC
    - cron: '0 6 * * *'
    #  5:00 PM IST ‚Üí 11:30 UTC
    - cron: '30 11 * * *'
    #  8:30 PM IST ‚Üí 15:00 UTC
    - cron: '0 15 * * *'
  workflow_dispatch:
    inputs:
      profile:
        description: 'Instagram Profile'
        required: false
        default: 'cyberuniverse.exe'
      upload_limit:
        description: 'Max Reels to Upload'
        required: false
        default: '1'

jobs:
  upload_reel:
    runs-on: ubuntu-latest
    
    env:
      INSTAGRAM_PROFILE: ${{ inputs.profile || 'cyberuniverse.exe' }}
      UPLOAD_LIMIT: ${{ inputs.upload_limit || 1 }}
      IG_COOKIES_JSON: ${{ secrets.IG_COOKIES_JSON }}
      YT_TOKEN_JSON_B64: ${{ secrets.YT_TOKEN_JSON_B64 }}
      CLIENT_SECRETS_B64: ${{ secrets.CLIENT_SECRETS_B64 }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      LIBGL_ALWAYS_SOFTWARE: "1"        # ‚úÖ New
      QT_QPA_PLATFORM: "offscreen" 

    steps:
      - name: üìÖ Checkout repository
        uses: actions/checkout@v3

      - name: üîß Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # üíæ Cache pip dependencies
      - name: üíæ Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # üíæ Cache Playwright browsers
      - name: üíæ Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # üíæ Cache system dependencies (ffmpeg & others)
      - name: üíæ Cache ffmpeg and sysdeps
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/ffmpeg
          key: ${{ runner.os }}-ffmpeg-v1
        id: ffmpeg-cache

      - name: üß± Install system dependencies (only if missing)
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libnss3 libatk-bridge2.0-0 libxss1 xvfb unzip jq

      - name: üì¶ Install Python dependencies & Playwright
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install requests yt-dlp google-api-python-client google-auth google-auth-oauthlib playwright openai opencv-python pillow pytrends
          playwright install --with-deps

      - name: üì• Download last successful processed_reels.json
        run: |
          echo "üîç Searching for last successful run..."
          run_id=$(gh run list --workflow "$GITHUB_WORKFLOW" --branch "$GITHUB_REF_NAME" --limit 5 --json databaseId,status | \
            jq -r '.[] | select(.status=="completed") | .databaseId' | head -n 1)

          if [ -n "$run_id" ]; then
            echo "‚úÖ Found previous run ID: $run_id"
            gh run download "$run_id" -n processed-reels -D processed-reels
          else
            echo "‚ö†Ô∏è No previous successful run found."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üß© Move processed_reels.json to root
        run: |
          if [ -f "processed-reels/processed_reels.json" ]; then
            mv processed-reels/processed_reels.json ./processed_reels.json
          else
            echo "‚ö†Ô∏è processed_reels.json not found in artifact"
          fi

      - name: ü©π Create empty processed_reels.json if missing
        run: |
          if [ ! -f processed_reels.json ]; then
            echo "[]" > processed_reels.json
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
              -d text="‚ö†Ô∏è *Fallback triggered:* processed_reels.json was missing. Recreated empty list." \
              -d parse_mode=Markdown
          fi    

      - name: üîë Restore YouTube credentials
        run: |
          echo "${{ env.YT_TOKEN_JSON_B64 }}" | base64 -d > token.json
          echo "${{ env.CLIENT_SECRETS_B64 }}" | base64 -d > client_secrets.json

      - name: ‚ñ∂Ô∏è Run main script with debug logging
        run: |
          xvfb-run --auto-servernum --server-args='-screen 0 1280x720x24' \
            python auto_reels_to_youtube.py | tee log.txt

      - name: üì§ Notify & upload debug logs if no reels
        if: always()
        run: |
          if grep -q "Reels fetched: 0" log.txt; then
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
              -d text="‚ö†Ô∏è *No reels found during GitHub run.* Possible cookie/session/profile issue.\nLogs uploaded." \
              -d parse_mode=Markdown
          elif grep -q "No new reels found" log.txt; then
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
              -d text="‚ÑπÔ∏è *No new reels to upload. All are already processed.*" \
              -d parse_mode=Markdown
          fi

      - name: üì§ Upload debug logs and screenshots
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: debug-logs
          path: |
            debug_*.*  
            log.txt
 
      - name: üì§ Upload processed reels artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: processed-reels
          path: processed_reels.json
          compression-level: 6
 
      - name: üó∞ Final debug on failure
        if: failure()
        run: |
          echo "--- Failure Debug Start ---"
          ls -la debug_reels_error.png || true
          echo "--- processed_reels.json ---"
          cat processed_reels.json || true
          echo "--- END ---"

      - name: ‚úÖ Telegram success alert
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ IG ‚Üí YT Automation Successful üéâ" \
            -d parse_mode=Markdown

      - name: ‚ùå Telegram failure alert
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚ùå IG ‚Üí YT Automation Failed. Check log.txt and debug_screenshot." \
            -d parse_mode=Markdown
