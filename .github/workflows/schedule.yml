name: Upload IG Reel to YouTube

on:
  schedule:
    - cron: '0 7 * * *'    # ⏰ 12:30 PM IST
    - cron: '30 12 * * *'  # ⏰ 6:00 PM IST
    - cron: '0 16 * * *'   # ⏰ 9:30 PM IST
  workflow_dispatch:

jobs:
  upload_reel:
    runs-on: ubuntu-latest
    env:
      INSTAGRAM_PROFILE: Hacksnip
      UPLOAD_LIMIT: 1
      IG_COOKIES_JSON: ${{ secrets.IG_COOKIES_JSON }}
      YT_TOKEN_JSON_B64: ${{ secrets.YT_TOKEN_JSON_B64 }}
      CLIENT_SECRETS_B64: ${{ secrets.CLIENT_SECRETS_B64 }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: 📅 Checkout repository
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🧱 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libnss3 libatk-bridge2.0-0 libxss1 xvfb unzip jq

      - name: 📦 Install Python dependencies & Playwright
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install requests yt-dlp google-api-python-client google-auth google-auth-oauthlib playwright openai opencv-python pillow
          playwright install --with-deps

      - name: 📥 Download last successful processed_reels.json artifact
        run: |
          gh run list --workflow "${GITHUB_WORKFLOW}" --branch "$GITHUB_REF_NAME" --limit 5 --json databaseId,status | jq -r \
            '.[] | select(.status=="completed") | .databaseId' | head -n 1 > run_id.txt

          if [ -s run_id.txt ]; then
            run_id=$(cat run_id.txt)
            echo "📥 Found previous run ID: $run_id"
            gh run download "$run_id" -n processed-reels -D processed-reels
          else
            echo "⚠️ No previous successful run found."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧩 Move processed_reels.json to root
        run: |
          if [ -f "processed-reels/processed_reels.json" ]; then
            mv processed-reels/processed_reels.json ./processed_reels.json
            echo "✅ Moved processed_reels.json to root"
          else
            echo "⚠️ processed_reels.json not found in artifact"
          fi

      - name: 🩹 Fallback if processed_reels.json not found
        run: |
          if [ ! -f processed_reels.json ]; then
            echo "[]" > processed_reels.json
            echo "⚠️ created empty processed_reels.json"
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
              -d text="⚠️ *Fallback triggered:* processed_reels.json was missing. Recreated empty list." \
              -d parse_mode=Markdown
          fi

      - name: 🔑 Restore YouTube credentials
        run: |
          echo "${{ env.YT_TOKEN_JSON_B64 }}" | base64 --decode > token.json
          echo "${{ env.CLIENT_SECRETS_B64 }}" | base64 --decode > client_secrets.json

      - name: ▶️ Run main script
        run: |
          xvfb-run --auto-servernum --server-args='-screen 0 1280x720x24' \
            python auto_reels_to_youtube.py

      - name: 📤 Upload processed reels artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-reels
          path: processed_reels.json
          if-no-files-found: warn
          compression-level: 6

      - name: 🗰 Dump debug if failure
        if: failure()
        run: |
          echo "=== Debug Artifacts ==="
          ls -la debug_reels_error.png || true
          echo "--- processed_reels.json ---"
          cat processed_reels.json || true
